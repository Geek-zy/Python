#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

'''

程序执行输出，正确答案：[{'id': 5}, {'id': 5}, {'id': 5}, {'id': 5}, {'id': 5}]

按照常理程序输出应该是：[{'id': 1}, {'id': 2}, {'id': 3}, {'id': 4}, {'id': 5}] 才对，
那为什么id的值都是5呢？

首先，把执行过程打印出来
[{'id': 1}]
[{'id': 2}, {'id': 2}]
[{'id': 3}, {'id': 3}, {'id': 3}]
[{'id': 4}, {'id': 4}, {'id': 4}, {'id': 4}]
[{'id': 5}, {'id': 5}, {'id': 5}, {'id': 5}, {'id': 5}]

看明白了吗？那是因为，每次执行到 data['id'] = r 的时候，就会把所有id的值修改为现在的值，
那么问题又来了，为什么修改此次id的值，会把所有的值都改了呢？

先看一个例子：
>>> a = {"id": 1}
>>> a
{'id': 1}
>>> b = a
>>> b
{'id': 1}
>>> a['id'] = 2
>>> a
{'id': 2}
>>> b
{'id': 2}
>>> c = []
>>> c
[]
>>> c.append(a)
>>> c
[{'id': 2}]
>>> a
{'id': 2}
>>> a['id'] = 3
>>> a
{'id': 3}
>>> c
[{'id': 3}]
>>> c[0]['id'] = 4
>>> c
[{'id': 4}]
>>> a
{'id': 4}

这回看明白了吧！将对象赋值给另一个对象，其本质相当于是 Python 中的浅拷贝，改变其中一个值的内容所有的值都改变。
用 C 语言的来理解，思路更加清晰，所有对象都是在一个内存空间中的，所有对象的指针都是指向同一个内存地址，
如果改变了内存地址中的值，那么所有指向它的对象都会改变，形成指针一对多的映射关系（指针映射 Pointer mapping）。

'''

datas = []

data  = {}
for r in [1, 2, 3, 4, 5]:
    data['id'] = r
    datas.append(data)

print(datas)
